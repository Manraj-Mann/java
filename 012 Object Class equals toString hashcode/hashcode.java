class A{

    int name;
    String branch;

    boolean equals(A obj){
        if(this.name == obj.name && this.branch == obj.branch){
            return true;
        }
        else{
            return false;
        }
    }

}
public class hashcode {

    public static void main(String[] args) {
        
        // what is hashcode ?
        // hashcode is a unique number which is generated by JVM for every object 
        // hashcode is used to identify the object uniquely
        // hashcode is used in hashing based collections like HashSet, HashMap, HashTable etc
        
        // how to get hashcode ?
        // we can get hashcode by using hashCode() method of Object class

        // Explain the output : A@5acf9800
        // A is the class name
        // @ is the separator
        // 5acf9800 is the hashcode of the object in hexadecimal form

        A obj1 = new A();
        obj1.name = 10;
        obj1.branch = "CSE";
        System.out.println(obj1); // Output: A@hascode

        // toString() method
        System.out.println(obj1.toString()); // Output: A@hascode
        System.out.println(obj1.hashCode()); // Output: hashcode in decimal form
        System.out.println(Integer.toHexString(obj1.hashCode())); // Output: hashcode in hexadecimal form
    
        // equals() method

        // equals() method is used to compare two objects for equality based on their hashcode

        A obj2 = new A();
        obj2.name = 10;
        obj2.branch = "CSE";

        // comment out the equals() method in A class and see the output of default equals() method
        System.out.println(obj1.equals(obj2)); // Output: false
        // why ? because obj1 and obj2 are two different objects and their hashcode is different
        
        // if we override equals() method in A class, then we can compare two objects based on their data members


    }
    
}
